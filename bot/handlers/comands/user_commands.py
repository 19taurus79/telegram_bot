import logging
import os

from aiogram import Router, types
from aiogram.enums import ParseMode # –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode.HTML
from aiogram.filters import CommandStart, Command, StateFilter # –î–æ–±–∞–≤–ª—è–µ–º StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeChat # –î–æ–±–∞–≤–ª—è–µ–º BotCommandScopeChat
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ò–ú–ü–û–†–¢–´ –§–£–ù–ö–¶–ò–ô –ë–î ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∫ –≤–∞—à–∏–º —Ñ–∞–π–ª–∞–º —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
from utils.db.get_products import get_products, get_product_by_id
from utils.db.get_remains import get_remains
from utils.db.get_submissions import get_submissions

# --- –ò–ú–ü–û–†–¢–´ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
from middlewares.auth_middleware import set_user_allowed_status, get_user_info, get_all_users


router = Router()
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ---
# –ß—Ç–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
admin_ids_str = os.getenv("ADMIN_TELEGRAM_IDS", "")
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É ID –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
ADMIN_IDS = [int(id_str.strip()) for id_str in admin_ids_str.split(',') if id_str.strip()]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô FSM ---
class BotStates(StatesGroup):
    waiting_for_nomenclature = State()
    waiting_for_product_selection = State() # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    waiting_for_submissions_nomenclature = State()
    waiting_for_submissions_product_selection = State() # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    waiting_for_user_id_to_allow = State()
    waiting_for_user_id_to_disallow = State()


# --- –ë–õ–û–ö 1: –í–°–ï –ö–û–ú–ê–ù–î–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ---
# –≠—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ `handlers/comands.py`,
# —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è `router = Router()` –∏ `class BotStates(...)`.
# –û–Ω–∏ –±—É–¥—É—Ç "–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å" –∫–æ–º–∞–Ω–¥—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏,
# –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–º—É, —á—Ç–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω—å—à–µ.

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç", url="https://www.example.com")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    logger.info(f"User {message.from_user.id} executed /start. State cleared.")


@router.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /menu, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç", url="https://www.example.com")]
    ])
    await message.answer("–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:", reply_markup=keyboard)
    logger.info(f"User {message.from_user.id} executed /menu. State cleared.")


@router.message(Command("help"))
async def cmd_help(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º –∏ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é!")
    logger.info(f"User {message.from_user.id} executed /help. State cleared.")


# --- –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì–û–í (–û—Å—Ç–∞—Ç–∫–∏, –ó–∞—è–≤–∫–∏) ---
# –≠—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç.

@router.message(Command("remains"))
async def cmd_remains_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        await message.delete() # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    except Exception as e:
        logger.warning(f"Failed to delete user message on /remains: {e}")
    await message.answer(
        "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏), —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏:",
        parse_mode=ParseMode.HTML # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
    )
    await state.set_state(BotStates.waiting_for_nomenclature)
    logger.info(f"User {message.from_user.id} entered /remains mode.")


@router.message(Command("orders"))
async def cmd_submissions_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        await message.delete() # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    except Exception as e:
        logger.warning(f"Failed to delete user message on /orders: {e}")
    await message.answer(
        "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏) —Ç–æ–≤–∞—Ä—É, –∑–∞ —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏:",
        parse_mode=ParseMode.HTML # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
    )
    await state.set_state(BotStates.waiting_for_submissions_nomenclature)
    logger.info(f"User {message.from_user.id} entered /orders mode.")


# --- –•–ï–ù–î–õ–ï–†–´ –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î ---
# –≠—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤—ã—à–µ, —á–µ–º FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã,
# –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–±—â–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ.

@router.message(Command("admin"))
async def cmd_admin_menu(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é

    if not is_admin(message.from_user.id):
        await message.answer("–£ –í–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∫ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
        logger.warning(
            f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /admin –æ—Ç {message.from_user.id}")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é Telegram
    admin_commands = [
        BotCommand(command="list_users", description="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="allow_user", description="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        BotCommand(command="disallow_user", description="‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        BotCommand(command="set_default_commands",
                   description="üîÑ –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –æ–Ω –≤–∏–¥–µ–ª –∏—Ö –≤ –º–µ–Ω—é)
    await message.bot.set_my_commands(
        admin_commands,
        scope=BotCommandScopeChat(chat_id=message.chat.id)
    )

    # *** –í–û–ó–í–†–ê–©–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï ParseMode.HTML ***
    await message.answer(
        "üõ†Ô∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é! –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users, /allow_user ID, /disallow_user ID.\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º, –Ω–∞–∂–º–∏—Ç–µ /set_default_commands.",
        parse_mode=ParseMode.HTML # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML
    )


@router.message(Command("set_default_commands"))
async def cmd_set_default_commands(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_default_commands, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ –≤ set_new_commands –≤ main.py)
    default_commands = [
        BotCommand(command="remains", description="üì¶ –ó–∞–ª–∏—à–∫–∏"),
        BotCommand(command="orders", description="üìÑ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"),
        BotCommand(command="admin", description="üõ†Ô∏è –ú–µ–Ω—é –∞–¥–º—ñ–Ω–∞"), # –í–∞–∂–Ω–æ: –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.bot.set_my_commands(
        default_commands,
        scope=BotCommandScopeChat(chat_id=message.chat.id)
    )
    await message.answer("üîÑ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ.</b>", parse_mode=ParseMode.HTML)
    logger.info(f"Admin {message.from_user.id} reset commands to default.")


@router.message(Command("allow_user"))
async def cmd_allow_user(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID."""
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /allow_user –æ—Ç {message.from_user.id}")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/allow_user Telegram_ID</code>", parse_mode=ParseMode.HTML)
        return

    try:
        user_id_to_allow = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}")
    if await set_user_allowed_status(user_id_to_allow, True):
        user_info = await get_user_info(user_id_to_allow)
        if user_info:
            name_display = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            if user_info.get('username'):
                name_display += f" (@{user_info.get('username')})"

            final_display = name_display if name_display else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: <code>{user_id_to_allow}</code>"
            await message.answer(f"‚úÖ {final_display} <b>–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø.</b>", parse_mode=ParseMode.HTML)
            logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}")
        else:
            await message.answer(f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID:</b> <code>{user_id_to_allow}</code> <b>–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).</b>", parse_mode=ParseMode.HTML)
            logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}, –Ω–æ –∏–Ω—Ñ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer(f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID:</b> <code>{user_id_to_allow}</code>. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ –æ—à–∏–±–∫–∞.", parse_mode=ParseMode.HTML)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")


@router.message(Command("disallow_user"))
async def cmd_disallow_user(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID."""
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /disallow_user –æ—Ç {message.from_user.id}")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/disallow_user Telegram_ID</code>", parse_mode=ParseMode.HTML)
        return

    try:
        user_id_to_disallow = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow}")
    if await set_user_allowed_status(user_id_to_disallow, False):
        await message.answer(f"‚ùå <b>–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID:</b> <code>{user_id_to_disallow}</code> <b>–∑–∞–ø—Ä–µ—â–µ–Ω.</b>", parse_mode=ParseMode.HTML)
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow}")
    else:
        await message.answer(f"‚ùì <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID:</b> <code>{user_id_to_disallow}</code>. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ –æ—à–∏–±–∫–∞.", parse_mode=ParseMode.HTML)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")


@router.message(Command("list_users"))
async def cmd_list_users(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list_users –æ—Ç {message.from_user.id}")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    users_info = await get_all_users()

    if not users_info:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    response_parts = ["<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"] # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
    for user_data in users_info:
        telegram_id = user_data.get('telegram_id')
        username = user_data.get('username')
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        is_allowed = user_data.get('is_allowed')
        reg_date = user_data.get('registration_date')
        last_act_date = user_data.get('last_activity_date')

        status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω" if is_allowed else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω"

        user_display = f"ID: <code>{telegram_id}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML-—Ç–µ–≥–∞ <code>
        if username:
            user_display += f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"

        full_name = f"{first_name} {last_name}".strip()
        if full_name:
            user_display += f"–ò–º—è: {full_name}\n"

        user_display += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        user_display += f"–†–µ–≥.: {reg_date.strftime('%Y-%m-%d %H:%M') if reg_date else 'N/A'}\n"
        user_display += f"–ê–∫—Ç.: {last_act_date.strftime('%Y-%m-%d %H:%M') if last_act_date else 'N/A'}\n"
        response_parts.append(user_display + "\n")

    final_response = "".join(response_parts)

    MAX_MESSAGE_LENGTH = 4096 # –î–ª—è HTML —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, –Ω–æ 4096 –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
    if len(final_response) > MAX_MESSAGE_LENGTH:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(0, len(final_response), MAX_MESSAGE_LENGTH):
            await message.answer(final_response[i:i+MAX_MESSAGE_LENGTH], parse_mode=ParseMode.HTML)
    else:
        await message.answer(final_response, parse_mode=ParseMode.HTML)


# --- –ë–õ–û–ö 2: –•–ï–ù–î–õ–ï–†–´ FSM-–°–û–°–¢–û–Ø–ù–ò–ô, –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–©–ò–ï –¢–ï–ö–°–¢–û–í–´–ô –í–í–û–î ---
# –≠—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ü–û–°–õ–ï –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
# –§–∏–ª—å—Ç—Ä—ã `~Command(...)` –≥–æ–≤–æ—Ä—è—Ç: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –∫–æ–º–∞–Ω–¥–∞."

@router.message(BotStates.waiting_for_nomenclature,
                ~Command("orders"), ~Command("menu"), ~CommandStart(), ~Command("help"), ~Command("admin"),
                ~Command("allow_user"), ~Command("disallow_user"), ~Command("list_users"), ~Command("set_default_commands"))
async def process_nomenclature_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    logger.info(f"User {message.from_user.id} in 'waiting_for_nomenclature' state, query: '{message.text}'")
    query = message.text.strip()
    if not query:
        await message.answer(
            "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–í–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.",
            parse_mode=ParseMode.HTML
        )
        return

    await message.answer(f"üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–®—É–∫–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ—é, —â–æ –º—ñ—Å—Ç–∏—Ç—å: <b>{query}</b>.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML)
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            builder.button(
                text=product_entry['product'],
                callback_data=f"select_product_remains:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–±—ñ–≥—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await state.update_data(product_query=query)

    except Exception as e:
        logger.error(f"Error searching products for remains for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer(
            f"üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)


@router.message(BotStates.waiting_for_submissions_nomenclature,
                ~Command("remains"), ~Command("menu"), ~CommandStart(), ~Command("help"), ~Command("admin"),
                ~Command("allow_user"), ~Command("disallow_user"), ~Command("list_users"), ~Command("set_default_commands"))
async def process_submissions_nomenclature_query(message: types.Message,
                                                 state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫."""
    logger.info(f"User {message.from_user.id} in 'waiting_for_submissions_nomenclature' state, query: '{message.text}'")
    query = message.text.strip()
    if not query:
        await message.answer(
            "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–í–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.",
            parse_mode=ParseMode.HTML)
        return

    try:
        await message.delete() # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logger.warning(f"Failed to delete user message in submissions query: {e}")

    await message.answer(f"üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–®—É–∫–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ—é, —â–æ –º—ñ—Å—Ç–∏—Ç—å: <b>{query}</b>.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML)
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            button_text = product_entry['product']
            builder.button(
                text=button_text,
                callback_data=f"select_product_submissions:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–±—ñ–≥—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await state.update_data(product_query=query)

    except Exception as e:
        logger.error(f"Error searching products for submissions for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer(
            f"üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)


# --- –ë–õ–û–ö 3: CALLBACK-–•–ï–ù–î–õ–ï–†–´ ---
# –≠—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∏–∂–µ. –ò—Ö –ø–æ—Ä—è–¥–æ–∫ –æ–±—ã—á–Ω–æ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–µ–Ω,
# —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –∞ –Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ ParseMode.HTML

@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_remains:'))
async def process_product_selection(callback_query: types.CallbackQuery,
                                    state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤.
    –í—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏".
    """
    logger.info(f"User {callback_query.from_user.id} selected product for remains: {callback_query.data}")
    await callback_query.answer("–ò—â—É –æ—Å—Ç–∞—Ç–∫–∏...")
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–û–±—Ä–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–∞–ª–∏—à–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–æ–≤—ñ–¥–Ω–∏–∫—É.",
                parse_mode=ParseMode.HTML)
            await state.set_state(BotStates.waiting_for_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            return

        remains_for_product = await get_remains(product_entry[0]['id'])
        submissions_for_product = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if remains_for_product:
            response_parts.append(
                f"üì¶ <b><u>–ó–∞–ª–∏—à–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: {product_entry[0]['product']}</u></b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            total_buh = 0
            total_skl = 0
            for r in remains_for_product:
                try:
                    total_buh += float(r.get('buh', 0))
                    total_skl += float(r.get('skl', 0))
                except (ValueError, TypeError):
                    pass

            response_parts.append(
                f"  üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.):</b> <code>{total_buh:.2f}</code>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
            response_parts.append(
                f"  üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥):</b> <code>{total_skl:.2f}</code>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            total_submissions_quantity = 0
            if submissions_for_product:
                for s in submissions_for_product:
                    try:
                        total_submissions_quantity += float(s.get('different', 0))
                    except (ValueError, TypeError):
                        pass

            response_parts.append(
                f"  üìù <b>–ü—ñ–¥ –∑–∞—è–≤–∫–∞–º–∏:</b> <code>{total_submissions_quantity:.2f}</code>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            free_stock = total_skl - total_submissions_quantity
            if free_stock < 0:
                free_stock = 0

            free_stock_status = "‚úÖ –Ñ –≤—ñ–ª—å–Ω–∏–π" if free_stock > 0 else "‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–æ–≥–æ"
            response_parts.append(
                f"  ‚û°Ô∏è <b>–í—ñ–ª—å–Ω–∏–π –∑–∞–ª–∏—à–æ–∫:</b> <code>{free_stock:.2f}</code> ({free_stock_status})\n\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            if len(remains_for_product) > 1:
                response_parts.append("<b>–î–µ—Ç–∞–ª—ñ –ø–æ –ø–∞—Ä—Ç—ñ—è—Ö:</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            for r in remains_for_product:
                if r['line_of_business'] in ['–í–ª–∞—Å–Ω–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –Ω–∞—Å—ñ–Ω–Ω—è', '–ù–∞—Å—ñ–Ω–Ω—è']:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: <code>{r['nomenclature_series']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –ú–¢–ù: <code>{r['mtn']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –°—Ç—Ä–∞–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: <code>{r['origin_country']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –°—Ö–æ–∂—ñ—Å—Ç—å: <code>{r['germination']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –†—ñ–∫ —É—Ä–æ–∂–∞—é: <code>{r['crop_year']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –í–∞–≥–∞: <code>{r['weight']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): <code>{r['buh']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): <code>{r['skl']}</code>\n\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    )
                else:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: <code>{r['nomenclature_series']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): <code>{r['buh']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): <code>{r['skl']}</code>\n\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    )
        else:
            response_parts.append(f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
            response_parts.append("  <i>–ó–∞–ª–∏—à–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</i>") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

        final_response = "".join(response_parts)

        builder = InlineKeyboardBuilder()
        await state.update_data(current_product_uuid=product_uuid)
        builder.button(
            text="üëâ –ü–æ–∫–∞–∑–∞—Ç–∏ —É –∫–æ–≥–æ –ø—ñ–¥ –∑–∞—è–≤–∫–∞–º–∏",
            callback_data="show_submissions_for_last_viewed_product"
        )

        if len(final_response) > 4096: # –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML
            await callback_query.message.answer(
                "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–∞–≥–∞—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç.",
                parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer(
                final_response,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
        await state.set_state(BotStates.waiting_for_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

    except Exception as e:
        logger.error(f"Error processing remains selection for user {callback_query.from_user.id}: {e}", exc_info=True)
        await callback_query.message.answer(
            f"üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
        await state.set_state(BotStates.waiting_for_nomenclature) # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    finally:
        pass


@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_submissions:'))
async def process_submissions_product_selection(
        callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞—è–≤–æ–∫."""
    logger.info(f"User {callback_query.from_user.id} selected product for submissions: {callback_query.data}")
    await callback_query.answer()
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–û–±—Ä–∞–Ω–æ. –®—É–∫–∞—é –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–æ–≤—ñ–¥–Ω–∏–∫—É.",
                parse_mode=ParseMode.HTML)
            await state.set_state(BotStates.waiting_for_submissions_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: {product_entry[0]['product']}</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: <code>{s['client']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: <code>{s['manager']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: <code>{s['contract_supplement']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: <code>{s['different']}</code>\n\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</i>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

        final_response = "".join(response_parts)

        if len(final_response) > 4096: # –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML
            await callback_query.message.answer(
                "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–∞–≥–∞—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç.",
                parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer(final_response, parse_mode=ParseMode.HTML)

        await state.set_state(BotStates.waiting_for_submissions_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

    except Exception as e:
        logger.error(f"Error processing submissions selection for user {callback_query.from_user.id}: {e}", exc_info=True)
        error_message = f"üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –ü–æ–º–∏–ª–∫–∞: <code>{e}</code>"
        await callback_query.message.answer(error_message, parse_mode=ParseMode.HTML)
        await state.set_state(BotStates.waiting_for_submissions_nomenclature)


@router.callback_query(
    lambda c: c.data == 'show_submissions_for_last_viewed_product')
async def show_submissions_for_product(callback_query: types.CallbackQuery,
                                       state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.
    –ü–æ–ª—É—á–∞–µ—Ç UUID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ FSMContext –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏.
    """
    logger.info(f"User {callback_query.from_user.id} requested submissions for last viewed product.")
    await callback_query.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–∞—è–≤–∫–∏...")

    data = await state.get_data()
    product_uuid = data.get('current_product_uuid')

    if not product_uuid:
        await callback_query.message.answer(
            "üì¶ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∫—ñ–≤</b>\n–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            parse_mode=ParseMode.HTML)
        await state.set_state(BotStates.waiting_for_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º
        return

    await callback_query.message.answer("üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–û–±—Ä–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–æ–≤—ñ–¥–Ω–∏–∫—É.",
                parse_mode=ParseMode.HTML)
            await state.set_state(BotStates.waiting_for_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: {product_entry[0]['product']}</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: <code>{s['client']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: <code>{s['manager']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: <code>{s['contract_supplement']}</code>\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: <code>{s['different']}</code>\n\n" # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</i>\n") # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML

        final_response = "".join(response_parts)

        if len(final_response) > 4096: # –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML
            await callback_query.message.answer(
                "üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–∞–≥–∞—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç.",
                parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer(final_response, parse_mode=ParseMode.HTML)

        await state.set_state(BotStates.waiting_for_nomenclature) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤

    except Exception as e:
        logger.error(f"Error showing submissions for last viewed product for user {callback_query.from_user.id}: {e}", exc_info=True)
        await callback_query.message.answer(
            f"üìÑ <b>–†–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫</b>\n–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∑–∞—è–≤–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –ü–æ–º–∏–ª–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
        await state.set_state(BotStates.waiting_for_nomenclature) # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    finally:
        pass


# --- –ë–õ–û–ö 4: –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (Fallback) ---
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö @router.message() —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤,
# —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.

@router.message(StateFilter(None)) # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    if message.text:
        await message.answer(
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ–π ' ‚ò∞ ', –≤–æ–Ω–∞ –ª—ñ–≤–æ—Ä—É—á",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É.")
