# HTTP-блок для редиректа на HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name taurus.pp.ua; # <--- ЗАМЕНИТЕ НА ВАШ ОСНОВНОЙ ДОМЕН

    # Конфигурация для Certbot (оставьте ее здесь, так как она нужна для обновления сертификатов)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Редирект всего остального HTTP-трафика на HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS-блок для вашего основного домена
server {
    listen 443 ssl; # <--- ИЗМЕНЕНО: удалено http2 здесь
    listen [::]:443 ssl; # <--- ИЗМЕНЕНО: удалено http2 здесь
    http2 on; # <--- ДОБАВЛЕНО: http2 включен отдельной директивой
    server_name taurus.pp.ua; # <--- ЗАМЕНИТЕ НА ВАШ ОСНОВНОЙ ДОМЕН

    # Пути к сертификатам, которые создал Certbot
    ssl_certificate /etc/letsencrypt/live/taurus.pp.ua/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/taurus.pp.ua/privkey.pem;

    # <--- УДАЛЕНЫ СТРОКИ:
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Базовые SSL-настройки (заменяют options-ssl-nginx.conf и ssl-dhparams.pem)
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 5m;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s; # Используйте DNS-серверы, доступные из вашего контейнера
    resolver_timeout 5s;

    # Проксирование для основного API (agri_api)
    location / {
        proxy_pass http://agri_api:8000; # Имя сервиса Docker и его внутренний порт
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Если ваше API использует WebSocket, раскомментируйте:
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

   # Проксирование для PgAdmin
location /pgadmin/ {
    # Переписываем URL, чтобы удалить /pgadmin/ префикс перед отправкой на бэкенд
    # Это позволяет PgAdmin "думать", что он работает в корневом пути
    rewrite ^/pgadmin/(.*)$ /$1 break;

    proxy_pass http://pgadmin:80; # Имя сервиса PgAdmin и его внутренний порт

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Эти заголовки сообщают PgAdmin о его базовом пути, что помогает ему генерировать правильные ссылки
    proxy_set_header X-Script-Name /pgadmin;
    proxy_set_header X-Forwarded-Prefix /pgadmin;

    # Обработка редиректов от PgAdmin.
    # 'default' означает, что Nginx будет переписывать редиректы от PgAdmin
    # (например, /login) в правильный внешний путь (/pgadmin/login).
    proxy_redirect default;
}


}
