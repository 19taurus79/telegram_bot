from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.db.get_products import get_products, get_product_by_id
from utils.db.get_remains import get_remains
from utils.db.get_submissions import get_submissions





# –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
import logging
# –ï—Å–ª–∏ –±—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å ADMIN_IDS –∏–∑ .env
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from middlewares.auth_middleware import set_user_allowed_status, get_user_info, get_all_users
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
router = Router()
logger = logging.getLogger(__name__)

# –í–∞—Ä–∏–∞–Ω—Ç 2: –ß—Ç–µ–Ω–∏–µ –∏–∑ .env (–±–æ–ª–µ–µ –≥–∏–±–∫–æ)
# –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –¥–æ–±–∞–≤—å—Ç–µ ADMIN_TELEGRAM_IDS=123,456 –≤ .env
admin_ids_str = os.getenv("ADMIN_TELEGRAM_IDS", "")
ADMIN_IDS = [int(id_str.strip()) for id_str in admin_ids_str.split(',') if id_str.strip()]

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

class BotStates(StatesGroup):
    waiting_for_nomenclature = State()
    waiting_for_product_selection = State()
    waiting_for_submissions_nomenclature = State()
    waiting_for_submissions_product_selection = State()


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
                              callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç",
                              url="https://www.example.com")]
    ])

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin ---
@router.message(Command("admin"))
async def cmd_admin_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        logger.warning(
            f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /admin –æ—Ç {message.from_user.id}")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é Telegram
    admin_commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="list_users", description="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="allow_user", description="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        BotCommand(command="disallow_user", description="‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        BotCommand(command="set_default_commands",
                   description="üîÑ –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        # BotCommand(command="some_other_admin_command", description="–î—Ä—É–≥–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # scope=BotCommandScopeChat(chat_id=message.chat.id) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from aiogram.types import BotCommandScopeChat  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è scope
    await message.bot.set_my_commands(
        admin_commands,
        scope=BotCommandScopeChat(chat_id=message.chat.id)
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é! –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_users, /allow_user ID, /disallow_user ID.\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º, –Ω–∞–∂–º–∏—Ç–µ /set_default_commands."
    )


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º ---
@router.message(Command("set_default_commands"))
async def cmd_set_default_commands(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ –≤ set_new_commands –≤ main.py)
    default_commands = [
        BotCommand(command="remains", description="üì¶ –ó–∞–ª–∏—à–∫–∏"),
        BotCommand(command="orders", description="üìÑ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"),
        # BotCommand(command="help", description="‚ùì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        # BotCommand(command="settings", description="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        # BotCommand(command="about", description="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
        BotCommand(command="admin", description="üõ†Ô∏è –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞"),
        # <-- –í–∞–∂–Ω–æ: –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    ]
    from aiogram.types import BotCommandScopeChat  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è scope
    await message.bot.set_my_commands(
        default_commands,
        scope=BotCommandScopeChat(chat_id=message.chat.id)
    )
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ.")
# --- –ù–û–í–´–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("allow_user"))
async def cmd_allow_user(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /allow_user –æ—Ç {message.from_user.id}")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allow_user Telegram_ID")
        return

    try:
        user_id_to_allow = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}")
    if await set_user_allowed_status(user_id_to_allow, True):
        user_info = await get_user_info(user_id_to_allow)
        if user_info:
            name_display = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            if user_info.get('username'):
                name_display += f" (@{user_info.get('username')})"

            final_display = name_display if name_display else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id_to_allow}"
            await message.answer(f"{final_display} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø.")
            logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id_to_allow} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).")
            logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow}, –Ω–æ –∏–Ω—Ñ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id_to_allow}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ –æ—à–∏–±–∫–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_allow} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

@router.message(Command("disallow_user"))
async def cmd_disallow_user(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /disallow_user –æ—Ç {message.from_user.id}")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disallow_user Telegram_ID")
        return

    try:
        user_id_to_disallow = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow}")
    if await set_user_allowed_status(user_id_to_disallow, False):
        await message.answer(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id_to_disallow} –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow}")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user_id_to_disallow}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ –æ—à–∏–±–∫–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_disallow} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

@router.message(Command("list_users"))
async def cmd_list_users(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /list_users –æ—Ç {message.from_user.id}")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    users_info = await get_all_users()

    if not users_info:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    response_parts = ["<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"]
    for user_data in users_info:
        telegram_id = user_data.get('telegram_id')
        username = user_data.get('username')
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        is_allowed = user_data.get('is_allowed')
        reg_date = user_data.get('registration_date')
        last_act_date = user_data.get('last_activity_date')

        status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω" if is_allowed else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω"

        user_display = f"ID: <code>{telegram_id}</code>\n"
        if username:
            user_display += f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"

        full_name = f"{first_name} {last_name}".strip()
        if full_name:
            user_display += f"–ò–º—è: {full_name}\n"

        user_display += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        user_display += f"–†–µ–≥.: {reg_date.strftime('%Y-%m-%d %H:%M') if reg_date else 'N/A'}\n"
        user_display += f"–ê–∫—Ç.: {last_act_date.strftime('%Y-%m-%d %H:%M') if last_act_date else 'N/A'}\n"
        response_parts.append(user_display + "\n")

    final_response = "".join(response_parts)

    MAX_MESSAGE_LENGTH = 4096
    if len(final_response) > MAX_MESSAGE_LENGTH:
        for i in range(0, len(final_response), MAX_MESSAGE_LENGTH):
            await message.answer(final_response[i:i+MAX_MESSAGE_LENGTH], parse_mode=ParseMode.HTML)
    else:
        await message.answer(final_response, parse_mode=ParseMode.HTML)

@router.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
                              callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç",
                              url="https://www.example.com")]
    ])
    await message.answer("–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:", reply_markup=keyboard)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º –∏ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é!")


# –ü–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (`/remains`)
@router.message(Command("remains"))
async def cmd_remains_start(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    await state.set_state(BotStates.waiting_for_nomenclature)


@router.message(BotStates.waiting_for_nomenclature)
async def process_nomenclature_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer(
            "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.")
        return

    await message.answer(f"–ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π: <b>{query}</b>.",
                parse_mode=ParseMode.HTML)
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            builder.button(
                text=product_entry['product'],
                callback_data=f"select_product_remains:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BotStates.waiting_for_product_selection)
        await state.update_data(product_query=query)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: `{e}`",
            parse_mode=ParseMode.HTML)
        await state.clear()


@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_remains:'))
async def process_product_selection(callback_query: types.CallbackQuery,
                                    state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏".
    –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ë—É—Ö. –∏ –°–∫–ª–∞–¥), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å "—Å–≤–æ–±–æ–¥–Ω—ã–π/–Ω–µ—Ç" –≤—ã–≤–æ–¥—è—Ç—Å—è –≤—Å–µ–≥–¥–∞.
    –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ < 0, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 0.00.
    """
    await callback_query.answer("–ò—â—É –æ—Å—Ç–∞—Ç–∫–∏...")
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –æ—Å—Ç–∞—Ç–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.")
            return

        remains_for_product = await get_remains(product_entry[0]['id'])
        submissions_for_product = await get_submissions(
            product_entry[0]['id'])  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–∞–º

        response_parts = []

        if remains_for_product:
            response_parts.append(
                f"üì¶ <b><u>*–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}*</u></b>\n")

            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ë—É—Ö. –∏ –°–∫–ª–∞–¥) - —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è
            total_buh = 0
            total_skl = 0
            for r in remains_for_product:
                try:
                    total_buh += float(r.get('buh', 0))
                    total_skl += float(r.get('skl', 0))
                except (ValueError, TypeError):
                    pass

            response_parts.append(
                f"  üìä <b>–û–±—â–µ–µ –Ω–∞–ª–∏—á–∏–µ (–ë—É—Ö.):</b> <code>{total_buh:.2f}</code>\n")
            response_parts.append(
                f"  üìä <b>–û–±—â–µ–µ –Ω–∞–ª–∏—á–∏–µ (–°–∫–ª–∞–¥):</b> <code>{total_skl:.2f}</code>\n")

            # –†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏ –∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ (–≤—Å–µ–≥–¥–∞)
            total_submissions_quantity = 0
            if submissions_for_product:
                for s in submissions_for_product:
                    try:
                        total_submissions_quantity += float(
                            s.get('different', 0))
                    except (ValueError, TypeError):
                        pass

            response_parts.append(
                f"  üìù <b>–ü–æ–¥ –∑–∞—è–≤–∫–∞–º–∏:</b> <code>{total_submissions_quantity:.2f}</code>\n")

            free_stock = total_skl - total_submissions_quantity  # –ò—Å–ø–æ–ª—å–∑—É–µ–º total_skl, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å—á–∏—Ç–∞–Ω
            # –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ –Ω—É–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ 0
            if free_stock < 0:
                free_stock = 0

            free_stock_status = "‚úÖ –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π" if free_stock > 0 else "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ"
            response_parts.append(
                f"  ‚û°Ô∏è <b>–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:</b> <code>{free_stock:.2f}</code> ({free_stock_status})\n\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä—Ç–∏—è–º" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
            if len(remains_for_product) > 1:
                response_parts.append("<b>–î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä—Ç–∏—è–º:</b>\n")

            # –í—ã–≤–æ–¥ –ø–æ –ø–∞—Ä—Ç–∏—è–º
            for r in remains_for_product:
                if r['line_of_business'] in ['–í–ª–∞—Å–Ω–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –Ω–∞—Å—ñ–Ω–Ω—è',
                                             '–ù–∞—Å—ñ–Ω–Ω—è']:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: {r['nomenclature_series']}\n"
                        f"  - –ú–¢–ù: {r['mtn']}\n"
                        f"  - –°—Ç—Ä–∞–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {r['origin_country']}\n"
                        f"  - –°—Ö–æ–∂—ñ—Å—Ç—å: {r['germination']}\n"
                        f"  - –†—ñ–∫ —É—Ä–æ–∂–∞—é: {r['crop_year']}\n"
                        f"  - –í–∞–≥–∞: {r['weight']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): {r['buh']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): {r['skl']}\n\n"
                    )
                else:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: {r['nomenclature_series']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): {r['buh']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): {r['skl']}\n\n"
                    )
        else:
            response_parts.append(f"üì¶ *–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}*")
            response_parts.append("  _–û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ._")

        final_response = "".join(response_parts)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–û–ö–ê–ó–ê–¢–¨ –ó–ê–Ø–í–ö–ò"
        builder = InlineKeyboardBuilder()

        await state.update_data(current_product_uuid=product_uuid)

        builder.button(
            text="üëâ –ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏",
            callback_data="show_submissions_for_last_viewed_product"
        )

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        else:
            await callback_query.message.answer(
                final_response,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
        await callback_query.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: `{e}`",
            parse_mode=ParseMode.HTML)
    finally:
        pass


# –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ (`/orders`)
@router.message(Command("orders"))
async def cmd_submissions_start(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è) —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏:",
        parse_mode=ParseMode.HTML)
    await state.set_state(BotStates.waiting_for_submissions_nomenclature)


@router.message(BotStates.waiting_for_submissions_nomenclature)
async def process_submissions_nomenclature_query(message: types.Message,
                                                 state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer(
            "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.",
            parse_mode=ParseMode.HTML)
        return

    try:
        await message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await message.answer(f"–ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π: <b>{query}</b>.",
                parse_mode=ParseMode.HTML)
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            button_text = product_entry['product']
            builder.button(
                text=button_text,
                callback_data=f"select_product_submissions:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await state.set_state(
            BotStates.waiting_for_submissions_product_selection)
        await state.update_data(product_query=query)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
        await state.clear()


@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_submissions:'))
async def process_submissions_product_selection(
        callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ò—â—É –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", parse_mode=ParseMode.HTML)
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}</b>\n")

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {s['client']}\n"
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {s['manager']}\n"
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {s['contract_supplement']}\n"
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {s['different']}\n\n"
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n")
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>\n")

        final_response = "".join(response_parts)

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                parse_mode=ParseMode.HTML)
        else:
            try:
                await callback_query.message.answer(final_response,
                                                    parse_mode=ParseMode.HTML)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await callback_query.message.answer(final_response,
                                                    parse_mode=ParseMode.HTML)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>"
        try:
            await callback_query.message.edit_text(error_message,
                                                   parse_mode=ParseMode.HTML)
        except Exception:
            await callback_query.message.answer(error_message,
                                                parse_mode=ParseMode.HTML)


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞—è–≤–∫–∞–º –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
@router.callback_query(
    lambda c: c.data == 'show_submissions_for_last_viewed_product')
async def show_submissions_for_product(callback_query: types.CallbackQuery,
                                       state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.
    –ü–æ–ª—É—á–∞–µ—Ç UUID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ FSMContext.
    """
    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏...")

    data = await state.get_data()
    product_uuid = data.get('current_product_uuid')

    if not product_uuid:
        await callback_query.message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            parse_mode=ParseMode.HTML)
        return

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", parse_mode=ParseMode.HTML)
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}</b>\n")

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {s['client']}\n"
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {s['manager']}\n"
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {s['contract_supplement']}\n"
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {s['different']}\n\n"
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n")
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>\n")

        final_response = "".join(response_parts)

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer(final_response,
                                                parse_mode=ParseMode.HTML)

    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        await callback_query.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
    finally:
        pass


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo_message(message: types.Message):
    if message.text:
        await message.answer(
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ–π ' ‚ò∞ ', –æ–Ω–∞ –ª–µ–≤–æ—Ä—É—á",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")