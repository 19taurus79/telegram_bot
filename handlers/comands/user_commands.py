from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.db.get_products import get_products, get_product_by_id
from utils.db.get_remains import get_remains
from utils.db.get_submissions import get_submissions

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
router = Router()


class BotStates(StatesGroup):
    waiting_for_nomenclature = State()
    waiting_for_product_selection = State()
    waiting_for_submissions_nomenclature = State()
    waiting_for_submissions_product_selection = State()
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –•–æ—Ç—è –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.





## –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
                              callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç",
                              url="https://www.example.com")]
    ])

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø –º–æ–≥—É –º–Ω–æ–≥–æ–µ! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


@router.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
                              callback_data="show_my_data")],
        [InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
        [InlineKeyboardButton(text="–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç",
                              url="https://www.example.com")]
    ])
    await message.answer("–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:", reply_markup=keyboard)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º –∏ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é!")





## –ü–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (`/remains`)

@router.message(Command("remains"))
async def cmd_remains_start(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    await state.set_state(BotStates.waiting_for_nomenclature)


@router.message(BotStates.waiting_for_nomenclature)
async def process_nomenclature_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer(
            "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.")
        return

    await message.answer(f"–ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π: <b>{query}</b>.",
                parse_mode=ParseMode.HTML)
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            builder.button(
                text=product_entry['product'],
                callback_data=f"select_product_remains:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BotStates.waiting_for_product_selection)
        await state.update_data(product_query=query)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: `{e}`",
            parse_mode=ParseMode.HTML)
        await state.clear()


@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_remains:'))
async def process_product_selection(callback_query: types.CallbackQuery,
                                    state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏".
    """
    await callback_query.answer("–ò—â—É –æ—Å—Ç–∞—Ç–∫–∏...")
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –æ—Å—Ç–∞—Ç–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.")
            return

        remains_for_product = await get_remains(product_entry[0]['id'])

        response_parts = []
        if remains_for_product:
            response_parts.append(
                f"üì¶ <b><u>*–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}*</u></b>\n")
            for r in remains_for_product:
                if r['line_of_business'] in ['–í–ª–∞—Å–Ω–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –Ω–∞—Å—ñ–Ω–Ω—è',
                                             '–ù–∞—Å—ñ–Ω–Ω—è']:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: {r['nomenclature_series']}\n"
                        f"  - –ú–¢–ù: {r['mtn']}\n"
                        f"  - –°—Ç—Ä–∞–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {r['origin_country']}\n"
                        f"  - –°—Ö–æ–∂—ñ—Å—Ç—å: {r['germination']}\n"
                        f"  - –†—ñ–∫ —É—Ä–æ–∂–∞—é: {r['crop_year']}\n"
                        f"  - –í–∞–≥–∞: {r['weight']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): {r['buh']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): {r['skl']}\n\n"
                    )
                else:
                    response_parts.append(
                        f"  - –ü–∞—Ä—Ç—ñ—è: {r['nomenclature_series']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–ë—É—Ö.): {r['buh']}\n"
                        f"  - –ù–∞—è–≤–Ω—ñ—Å—Ç—å (–°–∫–ª–∞–¥): {r['skl']}\n\n"
                    )
        else:
            response_parts.append(f"üì¶ *–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}*")
            response_parts.append("  _–û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ._")

        final_response = "".join(
            response_parts)  # Changed from "\n".join() to "".join() for consistency with HTML

        # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò "–ü–û–ö–ê–ó–ê–¢–¨ –ó–ê–Ø–í–ö–ò" ---
        builder = InlineKeyboardBuilder()

        # –°–û–•–†–ê–ù–Ø–ï–ú product_uuid –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(current_product_uuid=product_uuid)

        # CALLBACK_DATA –¢–ï–ü–ï–†–¨ –ü–†–û–°–¢–û –ú–ê–†–ö–ï–†, –ë–ï–ó UUID, –ß–¢–û–ë–´ –£–õ–û–ñ–ò–¢–¨–°–Ø –í 64 –ë–ê–ô–¢–ê
        builder.button(
            text="üëâ –ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏",
            callback_data="show_submissions_for_last_viewed_product"
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è callback_data
        )

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        else:
            await callback_query.message.answer(
                final_response,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
        await callback_query.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: `{e}`",
            parse_mode=ParseMode.HTML)
    finally:
        pass




## –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ (`/orders`)

@router.message(Command("orders"))
async def cmd_submissions_start(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è) —Ç–æ–≤–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏:",
        parse_mode=ParseMode.HTML)
    await state.set_state(BotStates.waiting_for_submissions_nomenclature)


@router.message(BotStates.waiting_for_submissions_nomenclature)
async def process_submissions_nomenclature_query(message: types.Message,
                                                 state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer(
            "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É.",
            parse_mode=ParseMode.HTML)
        return

    try:
        await message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await message.answer(f"–ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ: <b>{query}</b>...",
                         parse_mode=ParseMode.HTML)

    try:
        product_entries = await get_products(query)

        if not product_entries:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π: <b>{query}</b>.",
                parse_mode=ParseMode.HTML)
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for product_entry in product_entries:
            button_text = product_entry['product']
            builder.button(
                text=button_text,
                callback_data=f"select_product_submissions:{product_entry['id']}"
            )
        builder.adjust(1)

        await message.answer(
            "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await state.set_state(
            BotStates.waiting_for_submissions_product_selection)
        await state.update_data(product_query=query)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
        await state.clear()


@router.callback_query(
    lambda c: c.data and c.data.startswith('select_product_submissions:'))
async def process_submissions_product_selection(
        callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    product_uuid = callback_query.data.split(':')[1]

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ò—â—É –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", parse_mode=ParseMode.HTML)
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}</b>\n")

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {s['client']}\n"
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {s['manager']}\n"
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {s['contract_supplement']}\n"
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {s['different']}\n\n"
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n")
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>\n")

        final_response = "".join(response_parts)

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                parse_mode=ParseMode.HTML)
        else:
            try:
                await callback_query.message.answer(final_response,
                                                    parse_mode=ParseMode.HTML)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await callback_query.message.answer(final_response,
                                                    parse_mode=ParseMode.HTML)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>"
        try:
            await callback_query.message.edit_text(error_message,
                                                   parse_mode=ParseMode.HTML)
        except Exception:
            await callback_query.message.answer(error_message,
                                                parse_mode=ParseMode.HTML)





## –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞—è–≤–∫–∞–º –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù)

@router.callback_query(
    lambda c: c.data == 'show_submissions_for_last_viewed_product')
async def show_submissions_for_product(callback_query: types.CallbackQuery,
                                       state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ –ø–æ–¥ –∑–∞—è–≤–∫–∞–º–∏" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.
    –ü–æ–ª—É—á–∞–µ—Ç UUID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ FSMContext.
    """
    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ FSMContext
    data = await state.get_data()
    product_uuid = data.get('current_product_uuid')

    if not product_uuid:
        await callback_query.message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            parse_mode=ParseMode.HTML)
        return

    await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏...",
                                        parse_mode=ParseMode.HTML)

    try:
        product_entry = await get_product_by_id(product_uuid)
        if not product_entry:
            await callback_query.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", parse_mode=ParseMode.HTML)
            return

        submissions_data = await get_submissions(product_entry[0]['id'])

        response_parts = []
        if submissions_data:
            response_parts.append(
                f"üìÑ <b>–ó–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_entry[0]['product']}</b>\n")

            for s in submissions_data:
                response_parts.append(
                    f"  - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {s['client']}\n"
                    f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {s['manager']}\n"
                    f"  - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {s['contract_supplement']}\n"
                    f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {s['different']}\n\n"
                )
        else:
            response_parts.append(
                f"üìÑ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_entry[0]['product']}</b>\n")
            response_parts.append("  <i>–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>\n")

        final_response = "".join(response_parts)

        if len(final_response) > 4000:
            await callback_query.message.answer(
                "–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer(final_response,
                                                parse_mode=ParseMode.HTML)

    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        await callback_query.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—à–∏–±–∫–∞: <code>{e}</code>",
            parse_mode=ParseMode.HTML)
    finally:
        pass





## –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@router.message()
async def echo_message(message: types.Message):
    if message.text:
        await message.answer(
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é ' ‚ò∞ ', –≤–æ–Ω–∞ –ª—ñ–≤–æ—Ä—É—á",
            parse_mode=ParseMode.HTML)
    else:
        await message.answer("–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")